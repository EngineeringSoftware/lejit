The most recent versions that are still able to reproduce the bug is
8u372, 11.0.19.0, 17.0.7.0. Since 8u382, 11.0.20.0, 17.0.8.0, this bug
is fixed.

Fixed on Apr 18, 2023
https://github.com/eclipse/omr/pull/6952

Confirmed on Apr 10, 2023

Submitted on Apr 10, 2023
https://github.com/eclipse-openj9/openj9/issues/17139

===============
BELOW IS REPORT
===============

# Title
JDK 8/11/17/18 - incorrect result from JIT compilation due to NegativeArraySizeException not thrown

## System / OS / Java Runtime Information

### Java version
$ java -version
openjdk version "17.0.6" 2023-01-17
IBM Semeru Runtime Open Edition 17.0.6.0 (build 17.0.6+10)
Eclipse OpenJ9 VM 17.0.6.0 (build openj9-0.36.0, JRE 17 Linux amd64-64-Bit Compressed References 20230117_397 (JIT enabled, AOT enabled)
OpenJ9   - e68fb241f
OMR      - f491bbf6f
JCL      - 927b34f84c8 based on jdk-17.0.6+10)

### Operating system details
$ cat /etc/*release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=20.04
DISTRIB_CODENAME=focal
DISTRIB_DESCRIPTION="Ubuntu 20.04.3 LTS"
NAME="Ubuntu"
VERSION="20.04.3 LTS (Focal Fossa)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 20.04.3 LTS"
VERSION_ID="20.04"
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal

$ uname -a
Linux luzhou 5.4.0-86-generic #97-Ubuntu SMP Fri Sep 17 19:19:40 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux

## Description

Incorrect result is given when running the following program. The bug
affects 8u362, 11.0.18.0, 17.0.6.0, 18.0.2.1.

## Steps to reproduce
The following steps shows how to reproduce the bug on JDK 17.0.6.0 in a
Ubuntu Linux environment.

### Compile
$ javac C.java

### Execute
$ java C
-6670   // nondeterministic value

$ java -Xnojit C
0       // correct value

### Source code for an executable test case
// C.java
public class C {
    public static int m(float[] array) {
        // should throw NegativeArraySizeException
        float[] subarray = new float[array.length - 1];
        return subarray.length;
    }

    public static void main(String[] args) {
        int sum = 0;
        for (int i = 0; i < 10000; ++i) {
            try {
                sum += m(new float[]{});
            } catch (NegativeArraySizeException ignored) {
            }
        }
        System.out.println(sum); // expected 0
    }
}

### Workaround
Disable JIT.
$ java -Xnojit C
