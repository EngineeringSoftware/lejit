The most recent versions that are still able to reproduce the bug is
8u372, 11.0.19.0, 17.0.7.0. Since 8u382, 11.0.20.0, 17.0.8.0, this bug
is fixed.

Fixed on Apr 19, 2023 by Pull Request:
https://github.com/eclipse-openj9/openj9/pull/17157

Confirmed on Apr 10, 2023

Submitted on Apr 7, 2023
https://github.com/eclipse-openj9/openj9/issues/17129

===============
BELOW IS REPORT
===============

# Title
JDK 8/11/17/18 - wrong result from JIT compilation with modular operation and field access

## System / OS / Java Runtime Information

### Java version
$ java -version
openjdk 17.0.6 2023-01-17
IBM Semeru Runtime Open Edition 17.0.6.0 (build 17.0.6+10)
Eclipse OpenJ9 VM 17.0.6.0 (build openj9-0.36.0, JRE 17 Linux amd64-64-Bit Compressed References 20230117_397 (JIT enabled, AOT enabled)
OpenJ9   - e68fb241f
OMR      - f491bbf6f
JCL      - 927b34f84c8 based on jdk-17.0.6+10)

### Operating system details
$ cat /etc/*release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=20.04
DISTRIB_CODENAME=focal
DISTRIB_DESCRIPTION="Ubuntu 20.04.3 LTS"
NAME="Ubuntu"
VERSION="20.04.3 LTS (Focal Fossa)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 20.04.3 LTS"
VERSION_ID="20.04"
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal

$ uname -a
Linux luzhou 5.4.0-86-generic #97-Ubuntu SMP Fri Sep 17 19:19:40 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux

## Description

Incorrect result is given when running the following program. The bug
affects 8u362, 11.0.18.0, 17.0.6.0, 18.0.2.1.

## Steps to reproduce
The following steps shows how to reproduce the bug on JDK 17.0.6.0 in a
Ubuntu Linux environment.

### Compile
$ javac C.java

### Execute
$ java C
13815.0 // nondeterministic value

$ java -Xjit:optlevel=cold C 
17180.0 // nondeterministic value

$ java -Xnojit C
100000.0

### Source code for an executable test case
// C.java
public class C {

    private double q0;
    private double q1;
    private double q2;
    private double q3;

    public C(double a0, double a1, double a2, double a3) {
        this.q0 = a3;
        this.q1 = a1;
        this.q2 = 0;
        this.q3 = 0;
    }

    public static double m(double d) {
        C c = new C(0, 1.0, 0, d % d);
        return c.q1;
    }

    public static void main(String[] args) {
        double sum = 0;
        for (int i = 0; i < 100_000; ++i) {
            // m(1.0) is expected to be 1.0, but after a few thousand
            // iterations, m(1.0) returns 0.0.
            sum += m(1.0);
        }
        System.out.println(sum); // Expect 100000.0
    }
}

### Workaround
Disable JIT.
$ java -Xnojit C
